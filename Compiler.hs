module Compiler where
    import Data.List
    import Declarations
    import Store
    import Data.Either
    import Data.Maybe
    import MiniMF
    import Debug.Trace

    -- [Def (AtomicExpr (Var "main")) [] (AtomicExpr (LitNum 3)),Def (AtomicExpr (Var "foo")) [] (AtomicExpr (LitNum 4))]
    -- Compile a whole program. compileProgram takes a program (a list of definitions) and returns the the initial machine state that is then interpreted by MiniMF.
    compileProgram :: [Def] -> State
    compileProgram defs = let s = State {pc = 0, sp = -1, code = Code [], stack = Stack [], global = Heap [], heap = Heap []} in compileProgram' defs s where
        -- compileProgram' is a helper method to recursively go through all definitions of the program, compile each one and then return the initial state 
        compileProgram' (d : ds) state = compileProgram' ds (compileDefinition d state)
            -- possible trace call for debugging: trace ("compileProgram' calling compileProgram' with ds = " ++ show ds ++ " and state = " ++ show (compileDefinition d state)) (compileProgram' ds (trace ("compileProgram' calling compileDefinition with d = " ++ show d ++ " and state = " ++ show state) compileDefinition d state))
        compileProgram' [] state       = state -- initial state

    -- Compile a definition. compileDefinition takes the definition to compile and the current machine state and returns the updated machine state with the new stack and global environment.
    compileDefinition :: Def -> State -> State
    compileDefinition (Def e1 es e2) s@State{code = Code ccells, global = Heap hcells} =
        -- First we create a local environment for the function definition. Is this the right way to go?
        let localenv = posList es in
        -- We update the given state by appending a list of instruction to the code store, which are generated by 'compileExpression'. We also update the global environment by adding a DEF cell, containing information about the global definition we are currently compiling.
        s {code = Code (ccells ++ compileExpression e2 0 localenv ++ [Slide (length localenv + 1), Reduce, Return]), global = Heap (hcells ++ [DEF (show e1) (length localenv) (depth (code s))])}
    compileDefinition def state                                                        = ErrorState $ "Compile error: compileDefinition called with " ++ show def ++ " and " ++ show state ++ "."

    -- Compile an expression. compileExpression takes the expression to compile, an offset for the local environment (see pos+i(x) in the script) and a local environment.
    compileExpression :: Expr -> Int -> [(Expr, Int)] -> [Instruction]
    compileExpression e num pos = case e of
        -- As we are in MiniF, we do not have let statements or predefined functions like '+', '&' etc. So we only need to consider the following cases, which can be derived from the script:
            AtomicExpr (LitBool (BoolF False)) -> [Pushval "Bool" 0]
            AtomicExpr (LitBool (BoolF True))  -> [Pushval "Bool" 1]
            AtomicExpr (LitNum num)            -> [Pushval "Int" num]   -- main = second 1 2; second x y = y;
            AtomicExpr (Var name)              -> case posInd e num pos of
                Right ind  -> [Pushparam ind]
                Left error -> [Error error]
            AtomicExpr (Expr expr)             -> compileExpression expr num pos
            Func e1 e2                         -> compileExpression e2 num pos ++ [Pushfun $ show e, Makeapp]
            _                                  -> [Error $ "Compile error: Invalid MiniF expression " ++ show e ++ "."]

    -- Create a local environment.
    posList :: [Expr] -> [(Expr, Int)]
    posList es = posList' es 1 where
        posList' (x : xs) acc = (x, acc) : posList' xs (acc + 1)
        posList' [] acc       = []

    -- Get the index of the first occurence of a formal parameter in the local environment.
    posInd :: Expr -> Int -> [(Expr, Int)] -> Either String Int
    posInd e num pos = case lookup e pos of
        Just ind -> return (ind + num)
        _        -> Left $ "Compile error: Local environment " ++ show pos ++ " does not contain formal parameter " ++ show e ++ " at position " ++ show pos ++ "."